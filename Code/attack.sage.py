
# This file was *autogenerated* from the file attack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1428 = Integer(1428); _sage_const_7 = Integer(7); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_2048 = Integer(2048); _sage_const_65537 = Integer(65537); _sage_const_256 = Integer(256); _sage_const_1024 = Integer(1024); _sage_const_512 = Integer(512); _sage_const_39 = Integer(39); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_126 = Integer(126); _sage_const_19 = Integer(19); _sage_const_13 = Integer(13); _sage_const_71 = Integer(71); _sage_const_225 = Integer(225)
from sage.doctest.util import Timer

prime_list = list(i for i in range(_sage_const_2 ,_sage_const_1428 ) if is_prime(i))

def primorial(n):
    x = _sage_const_1 
    for i in range(n):
        x *= prime_list[i]
    return x

t = Timer()

sizeofN = input('Size of N(256,512,1024,2048,4096) : ')
if(sizeofN==_sage_const_256 ):
  num = _sage_const_20 
elif(sizeofN==_sage_const_512 ):
  num = _sage_const_39 
elif(sizeofN==_sage_const_1024 ):
  num =_sage_const_71 
elif(sizeofN==_sage_const_2048 ):
  num = _sage_const_126 
else:
  num = _sage_const_225 

L = primorial(num)
# print 'Value of M : ',L
g = Mod(_sage_const_65537 ,L)
print(g.multiplicative_order())

smooth = _sage_const_2 **_sage_const_7 *_sage_const_3 **_sage_const_3 *_sage_const_5 **_sage_const_2 *_sage_const_7 *_sage_const_11 *_sage_const_13 *_sage_const_17 *_sage_const_19 *_sage_const_23 
print 'smooth',smooth
def smoothorder(l):
  return smooth % Mod(g,l).multiplicative_order() == _sage_const_0 
v = prod(l for l,e in factor(L) if smoothorder(l))
print "Value of M' : ",v

n = input('N : ')
print "M' : ",v
u = input("p mod M' : ")
g = Mod(g,v)
order2 = g.multiplicative_order()
print 'Order : ',order2, factor(order2)

t.start()

power = sizeofN//_sage_const_2  - _sage_const_3 
H = _sage_const_10  + _sage_const_2 **(power) // v
u += floor((_sage_const_7 *_sage_const_2 **(power)) // v) * v

w = lift(_sage_const_1 /Mod(v,n))

R = QQ['x']; (x,) = R._first_ngens(1)
f = (w*u+H*x)/n
g = H*x
k = _sage_const_3 
m = _sage_const_7 
print 'multiplicity',k
print 'lattice rank',m

basis = [f**j for j in range(_sage_const_0 ,k)] + [f**k*g**j for j in range(m-k)]
basis = [b*n**k for b in basis]
basis = [b.change_ring(ZZ) for b in basis]

M = matrix(m)
for i in range(m):
  M[i] = basis[i].coefficients(sparse=False) + [_sage_const_0 ]*(m-_sage_const_1 -i)

M = M.LLL()

Q = sum(z*(x/H)**i for i,z in enumerate(M[_sage_const_0 ]))

for r,multiplicity in Q.roots():
  print 'root found : ',r
  if u+v*r > _sage_const_0 :
    g = gcd(n,u+v*r)
    if g > _sage_const_1 :
      print 'successful factorization : ',[g,n/g]
print 'time taken by coppersmith : ',t.stop().cputime

