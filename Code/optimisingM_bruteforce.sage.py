
# This file was *autogenerated* from the file optimisingM_bruteforce.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_168 = Integer(168); _sage_const_65537 = Integer(65537); _sage_const_39 = Integer(39); _sage_const_145 = Integer(145)
from sage.functions.log import logb

prime_list = list(i for i in range(_sage_const_2 ,_sage_const_168 ) if is_prime(i))
print(prime_list)

def primorial(n):
    x = _sage_const_1 
    for i in range(n):
        x *= prime_list[i]
    return x

M = primorial(_sage_const_39 )
g = Mod(_sage_const_65537 ,M)
order = g.multiplicative_order()
print order

factors = dict(factor(order))
print(factors)
candidates = set()
for i in factors:
    for j in range(_sage_const_1 ,factors[i]+_sage_const_1 ):
        candidates.add(i**j)
print candidates

def maxM(ordNew):
    newM = M
    for p in factor(M):
        g1 = Mod(_sage_const_65537 ,p[_sage_const_0 ])
        ordpi = g1.multiplicative_order()
        if(ordNew%ordpi!=_sage_const_0 ):
            newM = newM/p[_sage_const_0 ]
    return newM

S = Subsets(candidates)
# print(RDF(logb(len(S),2)))
best_order = order
best_M = M

for s in S.list():
    if(len(s)==_sage_const_0 ):
        continue
    order1 = prod(s)
    Mprime = maxM(order1)
    if(Mprime > _sage_const_2 **_sage_const_145 ):
        if(order1 < best_order):
            best_order = order1
            best_M = Mprime

print(best_order,best_M)
print(RDF(logb(best_M,_sage_const_2 )))

