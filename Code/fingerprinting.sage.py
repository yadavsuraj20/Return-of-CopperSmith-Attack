
# This file was *autogenerated* from the file fingerprinting.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_103 = Integer(103); _sage_const_7 = Integer(7); _sage_const_5 = Integer(5); _sage_const_97 = Integer(97); _sage_const_29 = Integer(29); _sage_const_23 = Integer(23); _sage_const_0 = Integer(0); _sage_const_41 = Integer(41); _sage_const_137 = Integer(137); _sage_const_43 = Integer(43); _sage_const_131 = Integer(131); _sage_const_89 = Integer(89); _sage_const_47 = Integer(47); _sage_const_113 = Integer(113); _sage_const_139 = Integer(139); _sage_const_83 = Integer(83); _sage_const_157 = Integer(157); _sage_const_151 = Integer(151); _sage_const_39 = Integer(39); _sage_const_67 = Integer(67); _sage_const_65537 = Integer(65537); _sage_const_13 = Integer(13); _sage_const_11 = Integer(11); _sage_const_17 = Integer(17); _sage_const_59 = Integer(59); _sage_const_31 = Integer(31); _sage_const_19 = Integer(19); _sage_const_53 = Integer(53); _sage_const_37 = Integer(37); _sage_const_109 = Integer(109); _sage_const_71 = Integer(71); _sage_const_127 = Integer(127); _sage_const_73 = Integer(73); _sage_const_101 = Integer(101); _sage_const_61 = Integer(61); _sage_const_79 = Integer(79); _sage_const_163 = Integer(163); _sage_const_107 = Integer(107); _sage_const_167 = Integer(167); _sage_const_149 = Integer(149)
prime_list = [_sage_const_2 ,_sage_const_3 ,_sage_const_5 ,_sage_const_7 ,_sage_const_11 ,_sage_const_13 ,_sage_const_17 ,_sage_const_19 ,_sage_const_23 ,_sage_const_29 ,_sage_const_31 ,_sage_const_37 ,_sage_const_41 ,_sage_const_43 ,_sage_const_47 ,_sage_const_53 ,_sage_const_59 ,_sage_const_61 ,_sage_const_67 ,_sage_const_71 ,_sage_const_73 ,_sage_const_79 ,_sage_const_83 ,_sage_const_89 ,_sage_const_97 ,_sage_const_101 ,_sage_const_103 ,_sage_const_107 ,_sage_const_109 ,_sage_const_113 ,_sage_const_127 ,_sage_const_131 ,_sage_const_137 ,_sage_const_139 ,_sage_const_149 ,_sage_const_151 ,_sage_const_157 ,_sage_const_163 ,_sage_const_167 ]
def primorial(n):
    x = _sage_const_1 
    for i in range(n):
        x *= prime_list[i]
    return x

def chinese_remainder(pairs,M): # Mi = M/pi^ei , Mi*yi = 1 mod pi^ei , X = xi*Mi*yi , M is order
    X = _sage_const_0 
    for piei in pairs:
        xi = pairs[piei]
        Mi = (M // piei)
        for j in range(piei):
            if((Mi*j)%piei == _sage_const_1 ):
                yi = j
                break
        X += xi*Mi*yi
        X = X % M
    return X

pairs={}
def discrete_log(n,g,order,factors_of_order,m):
    for i in factors_of_order:
        piei = i**factors_of_order[i]
        gi = pow(g,order//piei,m)
        ni = pow(n,order//piei,m)
        xi = -_sage_const_1 
        for j in range(_sage_const_0 ,piei):
            if pow(gi,j,m) == ni:
                xi = j
                pairs[piei]=xi
        if(xi==-_sage_const_1 ):
            return None
    return chinese_remainder(pairs,order)

m = primorial(_sage_const_39 )
g = Mod(_sage_const_65537 ,m)
g_order = g.multiplicative_order()
factors_of_order = dict(factor(g_order))
data = input("N : ")
d = discrete_log(data, g, g_order, factors_of_order, m)
print "Value of c :",d

